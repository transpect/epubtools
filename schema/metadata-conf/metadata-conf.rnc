default namespace = ""
namespace a = "http://relaxng.org/ns/compatibility/annotations/1.0"
namespace dc = "http://purl.org/dc/elements/1.1/"
namespace ns1 = "http://www.w3.org/1999/xhtml"
namespace opf = "http://www.idpf.org/2007/opf"
namespace s = "http://purl.oclc.org/dsdl/schematron"

s:ns [ uri = "http://purl.org/dc/elements/1.1/" prefix = "dc" ]
s:ns [ uri = "http://www.idpf.org/2007/opf" prefix = "opf" ]
include "heading-conf.rnc" {
  start =
    element epub-config {
      epub-config-attributes,
      (cover? & types? & meta & hierarchy? & checks? & html-head?)
    }
}
epub-config-attributes =
  global-atts?
  & format?
  & layout?
  & indent?
  & remove-scripts?
  & subset?
  & obfuscate?
  & variant?
  & css-handling?
  & css-parser?
  & page-map-xml?
  & html-subdir-name?
  & out-file-basename?
  & consider-headings-in-tables?
global-atts =
  attribute xml:lang { text }?,
  attribute xml:base { xsd:anyURI }?,
  attribute xml:space { "preserve" | "default" }?
format = attribute format { "EPUB2" | "EPUB3" | "KF8" }
indent =
  
  ## Whether the serialized HTML should be indented. Default: true.
  ##       'selective' means: indent="false" with textual insertions of line breaks and spaces
  ##       before p, h?, div, nav, aside elements.
  attribute indent { "true" | "false" | "selective" }
remove-scripts =
  
  ## Whether to remove script elements and event attributes. Default: false
  attribute remove-scripts { "true" | "false" }
subset =
  
  ## Use only a subset that covers the characters that are displayed
  ##       with that font. Requires https://github.com/transpect/epub-font-subsetter and Python
  attribute font-subset { "true" | "false" }
obfuscate =
  
  ## Obfuscates fonts with the EPUB font obfuscation algorithm.
  attribute font-obfuscate { "true" | "false" }
layout = attribute layout { "reflowable" | "fixed" }

## Space-separated names of arbitrary layout/format variants that may or may not
##     be recognized by the EPUB builder. Examples: ORIGINAL-CSS, FIXED-Apple
variant = attribute variant { text }

## Defaults to 'regenerated-per-split', i.e., all CSS that is included or linked in the input file will be
##       parsed. The common parts will be written to a single file whose name is 'styles/stylesheet.css' by default. All rules with
##       ID-based selectors be written to an output-file-specific CSS file whose base name is the base name of the corresponding
##       HTML output file. Rules with ID-based selectors that don’t have a corresponding ID will be discarded. 
##       'regenerated': All CSS rules will be written to 'styles/stylesheet.css'.
##       In both regeneration variants, unused class declarations will be removed. Also the @font-face declarations that are only referred to
##       in these unused rules.
##      
css-handling =
  attribute css-handling {
    list {
      ("unchanged" | "regenerated" | "regenerated-per-split"),
      
      ## Our new grammar-based CSS parser has some problems with comments in the
      ##             middle of properties. If it is unable to parse a CSS file, it will try parsing it again
      ##             after stripping all comments. This is handled by an XProc try/catch. Unfortunately, in
      ##             some cases, the XProc processor does not handle try/catch correctly and crashes with a
      ##             null pointer exception. Therefore we introduce this token that, if present, will
      ##             tell the CSS parser to unconditionally strip the comments first.
      "remove-comments"?
    }
  }

## Defaults to 'REx', a generated parser based on an EBNF grammar. Very large CSS documents 
##       seem to challenge REx though. Therefore you may switch to the traditional 'regex' parser.
##       The regex parser supports fewer features though. Background images and fonts seem to be supported.
##      
css-parser = attribute css-parser { "REx" | "REx-css3" | "regex" }
page-map-xml = attribute page-map-xml { xsd:boolean }
html-subdir-name =
  
  ## Whether the HTML files (except for a generated nav.xhtml) should be put in a subdirectory
  ##       of OEBPS. An empty string or a missing attribute means: no subdirectory.
  attribute html-subdir-name {
    xsd:string { pattern = "[\-_a-zA-Z0-9]*" }
  }
out-file-basename =
  
  ## Will be used as the basename for the output zip file.
  attribute out-file-basename {
    xsd:string { pattern = "[\-_.a-zA-Z0-9]+" }
  }
consider-headings-in-tables =
  
  ## Whether tables should be considered as splitting candidates. 
  ##         If this option is true, this may slow down the splitting of large documents 
  ##         with many tables.
  attribute consider-headings-in-tables { xsd:boolean }

## https://www.w3.org/TR/epub-ssv-11/
landmark-types =
  "abstract"
  | "acknowledgments"
  | "afterword"
  | "antonym-group"
  | "appendix"
  | "assessment"
  | "backmatter"
  | "bibliography"
  | "bodymatter"
  | "chapter"
  | "colophon"
  | "conclusion"
  | "contributors"
  | "copyright-page"
  | "cover"
  | "covertitle"
  | "credits"
  | "dedication"
  | "dictionary"
  | "division"
  | "epigraph"
  | "epilogue"
  | "endnotes"
  | "errata"
  | "etymology"
  | "example"
  | "footnotes"
  | "foreword"
  | "frontmatter"
  | "fulltitle"
  | "glossary"
  | "halftitle"
  | "halftitlepage"
  | "imprimatur"
  | "imprint"
  | "index"
  | "index-entry-list"
  | "index-group"
  | "index-headnotes"
  | "index-legend"
  | "introduction"
  | "landmarks"
  | "learning-objective"
  | "learning-resource"
  | "loa"
  | "loi"
  | "lot"
  | "lov"
  | "notice"
  | "other-credits"
  | "panel-group"
  | "pagebreak"
  | "page-list"
  | "part"
  | "preamble"
  | "preface"
  | "prologue"
  | "qna"
  | # <value>rearnotes</value> deprecated
    "revision-history"
  | # <value>subchapter</value> deprecated
    "subtitle"
  | "title"
  | "titlepage"
  | "toc"
  | "volume"
hidden-attribute =
  
  ## Whether the generated typed item (toc, landmarks, lot, …) should be hidden. If missing, should be
  ##           interpreted as false. 
  ##           See http://www.idpf.org/epub/301/spec/epub-contentdocs.html#sec-xhtml-nav-def-hidden
  ##         
  attribute hidden { "true" | "false" }?
landmark-type-element =
  element type {
    attribute name { "landmarks" },
    
    ## Rendered, localized heading (e.g., 'Inhaltsverzeichnis' for type='toc')
    attribute heading { text }?,
    hidden-attribute,
    global-atts,
    
    ## A space-separated list of types that should be collected when generating 
    ##           the landmarks nav element. 
    ##           If this attribute is missing, all landmark-types as declared in this schema should be considered. 
    ##           Although not prohibited by the spec, there should not be other types than defined in
    ##           http://www.idpf.org/epub/vocab/structure/, or more specifically, than present in the landmark-types
    ##           in this schema.
    ##           
    attribute types {
      list { (landmark-types | "toc")+ }
    }?
  }
toc-type-element =
  element type {
    attribute name { "toc" },
    attribute heading { text }?,
    attribute fallback-id-for-landmark {
      xsd:NCName
      >> a:documentation [
           "This attribute may contain the ID of a rendered toc (a div, for example) that does *not* have the\x{a}" ~
           '          epub:type="toc" attribute. If the epub:type-toc is not included in the spine, this may be used to indicate which \x{a}' ~
           "          alternative rendered piece of content the toc landmark entry should point to. If there is no element with that\x{a}" ~
           "          ID (and no epub:type toc), there will be no toc landmark element. If, on the other hand, there is an epub:type toc\x{a}" ~
           "          and if it is a nav element, the toc landmark will point to this epub:type toc. (If there is an epub:type toc but\x{a}" ~
           "          it is not a nav element, there will probably no toc landmark. We should check epub:type on non-nav elements in \x{a}" ~
           "          Schematron unlesss epubcheck does already warn about it.)"
         ]
    }?,
    hidden-attribute,
    # This is not configurable (yet). It is fixed to nav.xhtml. <ref name="file-attribute"/>
    global-atts
  }
cover =
  
  ## If no *[@epub:type='cover'] or div[@id = 'epub-cover-image-container'] is included in the source, 
  ##         a cover HTML file will be generated from the PNG or JPEG image with the given href. 
  ##         (Could be another file type, but not implemented yet)
  element cover {
    global-atts
    & attribute href { xsd:anyURI }
    & ((
        ## Whether the generated cover HTML should use svg to wrap the cover image. Should be
        ##                 assumed false if omitted.
        attribute svg { "true" },
        
        ## Adds a line of CSS to fix cover scaling for some reading systems.
        attribute svg-scale-hack { "true" | "false" }?)?
       | 
         ## Whether the generated cover HTML should use svg to wrap the cover image. Should be
         ##                 assumed false if omitted.
         attribute svg { "false" }?)
    & 
      ## If an alt attribute shall be added to Cover img or svg/title. If not set, 
      ##               the default value is epub-cover-image or "Cover for {dc:title}/'EPUB'"
      attribute alt { text }?
    & 
      ## The opf-id attribute allows customizing the cover ID in the OPF document.
      attribute opf-id { text }?
  }
types =
  
  ## Please note that due to Relax NG restrictions, the order in which the types are
  ##         declared is important: toc first, then landmarks, then other types. Custom types must have a 
  ##       namespace prefix. Their namespace must be declared.
  element types {
    global-atts,
    (attribute nav-spine-pos {
       xsd:decimal
       >> a:documentation [
            "Defaults to 1.5, the cover typically gets 1. If you want to sort nav.xhtml after \x{a}" ~
            "              the 3rd split chunk in the spine, use 3.5 for example."
          ]
     }?
     & 
       ## space separated list of epub:type values that will be pulled from secton/div to surrounding body
       attribute pull-up-types {
         list { (landmark-types | "toc")+ }
       }?),
    toc-type-element?,
    landmark-type-element?,
    plain-type-element*
  }
plain-type-element = element type { plain-type-attributes, global-atts }
plain-type-attributes =
  
  ## epub:type attribute values ('backmatter', 'tr:bio', …)
  attribute name {
    landmark-types
    | xsd:QName { pattern = "\i\c*:\i\c*" }
  },
  
  ## Rendered, localized heading (e.g., 'Inhaltsverzeichnis' for type='toc')
  attribute heading { text }?,
  file-attribute,
  
  ## Example: <type name="cover" guide-type="text" heading="Cover"/> will create an EPUB2
  ##         guide entry <reference type="text" href="cover.xhtml" title="Cover"/>, if cover.xhtml contains 
  ##         the element with epub:type="cover". If there is a default mapping, for example from epub:type="bodymatter" to
  ##         guide type="text", this default mapping will be suppressed.
  ##         It may contain space-separated values. There will be a guide/reference entry for each of the tokens.
  ##         According to http://support.apple.com/en-us/HT202972 you may use the value of 'other.reader-start-page'
  ##         for iBooks to open the book at that location.
  ##         Please see http://www.idpf.org/epub/20/spec/OPF_2.0.1_draft.htm#Section2.6 for the permitted type attribute 
  ##         values, including custom values starting in 'other.'.
  ##         Example: <type name="cover" heading="[Cover]" guide-type="text other.reader-start-page"/>
  ##         
  attribute guide-type { text }?
file-attribute =
  
  ## Output file base name (e.g., 'chapter', 'appendix', 'cover')
  attribute file { text }?
meta =
  element metadata {
    global-atts,
    ((dc-identifier | dc-identifier-mandatory-scheme+)
     & element dc:title { text }+
     & element dc:creator {
         
         ## To be completed. Also, to be extended wrt EPUB3
         attribute opf:role { "aut" | "edt" }?,
         attribute opf:file-as { text }?,
         text
       }*
     & element dc:publisher { text }*
     & element dc:contributor { text }*
     & element dc:rights { text }*
     & element dc:date { text }*
     & element dc:language { text }+
     & element dc:format { text }*
     & element dc:description { text }*
     & element dc:subject { text }*
     & element dc:relation { text }*
     & element dc:source { text }*
     & element dc:type { text }*
     & element dc:coverage { text }*
     & element meta {
         (attribute property { text },
          text)
         | (attribute name { text }
            & attribute content { text })
         | (attribute refines { text }
            & attribute scheme { text })
       }*
     & element link {
         attribute href { text }
         & attribute rel { text }
         & attribute properties { text }?
         & attribute refines { text }?
         & attribute media-type { text }?
       }*)
  }
[
  s:pattern [
    id = "multiple_ids_must_have_format"
    "\x{a}" ~
    "      "
    s:rule [
      context =
        "dc:identifier[not(opf:scheme)][count(../dc:identifier[not(opf:scheme)]) gt 1]"
      "\x{a}" ~
      "        "
      s:assert [
        test =
          "exists(@format) or count(../dc:identifier[not(opf:scheme)][not(@format)]) eq 1"
        "If there are multiple dc:identifiers without opf:scheme, at most one of them may omit its format attribute."
      ]
      "\x{a}" ~
      "        "
      s:assert [
        test =
          "not(@format = (../dc:identifier[not(opf:scheme)] except current())/@format)"
        "@format attributes must be distinct"
      ]
      "\x{a}" ~
      "      "
    ]
    "\x{a}" ~
    "    "
  ]
  s:pattern [
    id = "warn_if_identifier_and_conf_declare_format"
    "\x{a}" ~
    "      "
    s:rule [
      context =
        "dc:identifier[@format][not(@format = /epub-config/@format)]"
      "\x{a}" ~
      "        "
      s:assert [
        test =
          "some $f in ../dc:identifier/@format satisfies ($f = /epub-config/@format)"
        role = "warn"
        "This identifier is in a different format than you have specified for\x{a}" ~
        "        the whole conversion, and there is no other dc:identifier for the specified format. If you specify this format on the Calabash commandline (target="
        s:value-of [ select = "@format" ]
        "), it will have precedence over /epub-config/@format."
      ]
      "\x{a}" ~
      "      "
    ]
    "\x{a}" ~
    "    "
  ]
]
dc-identifier =
  element dc:identifier {
    global-atts,
    format?,
    attribute opf:scheme { text }?,
    text
  }+
dc-identifier-mandatory-scheme =
  element dc:identifier {
    global-atts,
    attribute opf:scheme { text },
    text
  }
checks =
  element checks {
    attribute xml:base { xsd:anyURI }?,
    (check | schematron)*
  }
check =
  element check {
    attribute param { text },
    attribute value { text },
    attribute severity { "info" | "warning" | "error" | "fatal-error" }?
  }
schematron =
  element schematron {
    attribute href { xsd:anyURI },
    
    ## not implemented yet
    attribute phase { xsd:NCName | "#all" }?
  }
html-head = element ns1:head { any-html }
any-html =
  attribute * { text }*,
  mixed {
    element * { any-html }*
  }
