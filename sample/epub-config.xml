<?xml version="1.0" encoding="UTF-8"?>   
<?xml-model href="http://transpect.io/epubtools/schema/metadata-conf/metadata-conf.rng" schematypens="http://relaxng.org/ns/structure/1.0"?>
<?xml-model href="http://transpect.io/epubtools/schema/metadata-conf/metadata-conf.rng" schematypens="http://purl.oclc.org/dsdl/schematron"?>
<epub-config xmlns:tr="http://transpect.io" 
  format="EPUB3" 
  layout="reflowable" 
  css-handling="regenerated-per-split remove-comments"
  css-parser="REx"
  html-subdir-name="text" 
  indent="selective"
  font-subset="false"
  font-obfuscate="false"
  consider-headings-in-tables="false">
	<!-- layout: reflowable|fixed
	       (default: reflowable; fixed only permitted for KF8 and EPUB3 layouts)
	     format: EPUB2|EPUB3|KF8 (default: EPUB3)
  	     Please note that specifying the format as the target option will override conf settings. 
	     css-handling: regenerated-per-split|regenerated-per-split remove-comments|unchanged (default: regenerated-per-split)
	       Note: 'regenerated-per-split remove-comments' is the same as 'remove-comments regenerated-per-split' 
	     font-subset: true|false (default: false); whether a subset of the font should be created which 
	       includes only the characters that are used in the book
	     font-obfuscate: true|false (default: false); when true, all fonts are encrypted with 
	       the EPUB font obfuscation algorithm.
	     consider-headings-in-tables: true|false (default: false). If true, allow headings or other splitting points 
	       to be in tables. This might come with a performance penalty for table-heavy documents, and it need not be
	       used unless there are split points in tables, which is rare.
	-->
	
	<!-- COVER:
		Unless there is a div with id='epub-cover-image-container'
		or with epub:type='cover', cover HTML (or SVG wrapper, if svg='true') 
		code will be generated.
		The href attribute should include the path to the cover image file
		(currently: PNG or JPEG). 
		It may be an http(s):, a file:, or a relative URI. Relative
		URIs will be resolved against the HTML source location.
	  Support for external SVG files yet to be implemented.-->
  <cover href="images/cover.png" svg="true" svg-scale-hack="true" opf-id="my-cover-id"/>
	
	<types nav-spine-pos="3.5">
    <!-- A mapping from epub:type attribute values to generated
      headings or list entries (type/@heading attribute) or export
      file base names (type/@file) for the typed items. -->
    <!-- A toc will be generated unless there is already a nav[@epub:type='toc'].
    You can control its appearance in the spine content with the hidden attribute.
    If there is already a toc in the content, hidden is always interpreted as 'false'.
    Is that what you want? Our thinking was along the lines: if you include a rendered
    toc in your HTML, you want to show it to the world.
    
    The default for @nav-spine-pos is 1.5. The file with the generated navs will then be 
    put right after the cover. Applies only to EPUB3.
    
    Please note that due to limitations of Relax NG (or of the schema designer),
    the required order of type declarations is toc, landmarks, everything else.
    -->
	  <type name="toc" heading="Inhaltsverzeichnis" hidden="true" fallback-id-for-landmark="rendered_toc"/>
	  <!--
      There may be an optional hidden attribute for landmarks and toc (values: true|false,
      default: true). It applies only to generated nav elements.
      Please note that some reading systems still ignore this setting.
      The generated landmarks nav element has the id 'landmarks'. 
      If the toc is visible and you want to suppress the display of the landmarks nav,
      add nav#landmarks { display: none } to your CSS.
      The types attribute is optional. You may use it to restrict the landmarks to certain 
      types. By default, all types defined as landmark-types in the associated RNG schema
      will be considered when generating the landmarks. 
	    fallback-id-for-landmark: See the embedded documentation in the Relax NG schema. 
	  --> 
    <type name="landmarks" heading="Übersicht" hidden="true" types="cover bodymatter toc"/>
    <type name="cover" heading="Cover" file="cover" guide-type="text"/>
    <type name="frontmatter" heading="Vorspann"/>
    <type name="bodymatter" heading="Hauptteil"/>
    <type name="backmatter" heading="Anhang"/>
    <type name="glossary" heading="Glossar"/>
    <type name="tr:bio" file="author"/>
    <type name="tr:about-the-book" file="about-the-book"/>
    <type name="abstract" file="about-the-content"/>
    <type name="fulltitle" file="title"/>
    <type name="copyright-page" file="copyright"/>
    <type name="part" file="part"/>
    <type name="chapter" file="chapter"/>
    <type name="appendix" file="appendix"/>
    <type name="glossary" file="glossary"/>
    <type name="other-credits" file="other-credits"/>
    <type name="tr:popup" file="popup"/>
    <type name="tr:advertisement" file="advertisement"/>
  </types>

  <metadata xmlns:dc="http://purl.org/dc/elements/1.1/">
    <dc:identifier format="EPUB3">89392383923</dc:identifier>
    <dc:identifier format="KF8">89392383923</dc:identifier>
    <dc:title>Mustertitel</dc:title>
    <dc:creator>Autoren</dc:creator>
    <dc:publisher>Verlag</dc:publisher>
  	<dc:language>de</dc:language>
  </metadata>

  <hierarchy media-type="application/xhtml+xml" max-text-length="200000" generated-frontmatter-title="">
    <!-- see schema heading-conf.rng for generated-frontmatter-title -->
    <unconditional-split elt="div" attr="class" attval="white"/>
    <unconditional-split elt="h1"/>
    <conditional-split elt="p" attr="class" attval="asterism"/>
    <!-- asterisms, also: dinkus, usually three consecutive astersisks to separate subsections without headings.
         Unless there is nav="no", a short (up to eight words) preview of the first paragraph after the asterism
         or emptyline will be created. emptyline may either be on an empty paragraph or on the paragraph following
         the empty line, eliciting an empty line by margin-top, for example. 
         'emptyline' or 'asterism' are not reserved words; you may name and implement the classes as you like. -->
    <conditional-split elt="p" attr="class" attval="emptyline" nav="no"/>
    <heading elt="h1"/>
    <heading elt="h2" attr="class" attval="chapter-level" level="3">
      <!-- For a h2 element that has both classes, 'chapter-level' and 'index', this conf item wins over the following
        item. However, the max-text-length setting will be taken from the following conf item since both
        items match in principle and this one doesn’t specify max-text-length. -->
      <!-- Specificity calculations for these conf items are done differently than in CSS. As a general rule,
        the more attributes (class, epub-type, id) are specified, the more specific a conf item matches. 
        If all are otherwise equal, the longer string value of the serialized attributes wins. If string lengths
        are equal, the topmost conf item will win. (At least from looking at the splitter XSL code this should 
        be an accurate description of the rules.) -->
    </heading>
    <heading elt="h2" attr="class" attval="index" level="2" max-text-length="15000">
      <!-- allow a more fine-grained splitting, in particular for generated content where manual splits 
        cannot be inserted, and/or for HTML with a small text/markup ratio, as might be the case in index
        lists. Then splitting by text length might lead to large chunks that may still make reading systems
        choke. -->
    </heading>
    <unconditional-split attr="epub:type" attval="tr:bio"/>
    <unconditional-split attr="epub:type" attval="cover"/>
  </hierarchy>
  
  <checks>
    <!-- 1 kB = 1024 Bytes, 1 MB = 1024 kB -->
    <check param="result-max-mb" value="12" severity="warning"/>
    <!-- result-max-mb: Max total EPUB file size --> 
    <check param="result-max-mb" value="500" severity="error"/>
    
    <check param="html-max-kb" value="300" severity="warning"/>
    
    <check param="image-max-mb" value="1.5" severity="warning"/>
    
    <!-- 1 Mpx = 1e6 px -->
    <check param="image-max-mpx" value="3.2" severity="warning"/>
    
    <!-- image-dpi: Will require all images that have density information to report this as XXXdpi,
    otherwise unchecked. Desirable: calculation depending on CSS settings, typical screen sizes, pixel count. -->
    <check param="image-min-dpi" value="300" severity="warning"/>
    <check param="image-max-dpi" value="300" severity="warning"/>
    
    <!-- all combinations of min/max, height/width, error/warning are supported: -->
    <check param="image-max-height" value="750" severity="warning"/>
    
    <check param="cover-min-width-px" value="800" severity="warning"/>
    <check param="cover-max-width-px" value="1440" severity="warning"/>
    <!-- max table string length -->
    <check param="table-max-str-length" value="20000" severity="warning"/>
    <check param="table-max-cell-count" value="1800"  severity="warning"/>
    <!-- Custom Schematron. See the debug-dir/epubtools/input-for-schematron.xml (after running 
      a conversion with debug=yes) for an input example. See the included Schematron file
      schematron/epub.sch.xml for rule examples. -->
<!--    <schematron uri="http://some.location/schematron.sch"/>-->
  </checks>
  
  <!-- Replace the input HTML head element with this one (for using different CSS, etc.): -->
  <head xmlns="http://www.w3.org/1999/xhtml">
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>beer2poetry</title>
    <meta name="author" content="Codrops"/>
    <link rel="stylesheet" type="text/css" href="css/epub.css"/>
  </head>
</epub-config>
